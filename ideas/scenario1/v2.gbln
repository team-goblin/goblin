# This is the Goblin V2 file.
#
# Retrieve all stocks beneath x price.
# For each - get its average volume for the last 5 days - store it's value in a hash map.
# Write to json dict.

CLIENT_ID : str = os.environ["CLIENT_ID"];
CLIENT_SECRET : str = os.environ["SECRET_ID"];
BEARER_TOKEN : str | null = null;
BEARER_TOKEN_EXPIRES : int | null = null;

# I like these contracts.
struct Quote {
    id: str;
    price: float;
    volume: int;
    quote_timestamp: int;
};

struct APIRequest(HTTPRequest) {
    url: HTTPResourceURL[Literal("https://stocktrader.io")];
}

struct AuthRequest(APIRequest) {
    endpoint: HTTPResourceURL[Literal("auth")];
    type: HTTPRequestType.GET;
    client_id: HTTPRequestQueryParameter[Literal(CLIENT_ID)];
    client_secret: HTTPRequestQueryParameter[Literal(CLIENT_SECRET)];
    grant_type:  HTTPRequestQueryParameter[Literal("client_credentials")];
    scope:  HTTPRequestQueryParameter[Literal("default")];
    response: AuthResponse;
}

struct AuthResponse(HTTPResponse) { # Can expose parts of the response here, throw away everything we don't need.
    access_token: HTTPResponseJSONBodyKey[str];
    expires_in: HTTPResponseJSONBodyKey[int];
}

struct QuoteRequest(APIRequest) {
    filter: Optional(HTTPRequestQueryParameter[str]);
    type: HTTPRequestType.GET;
    page_key: Optional(HTTPRequestQueryParameter[str | null])
    response: QuoteResponse;
    paginator: Paginator = getNextPaginationRequest;
    interceptors: Interceptor[] = [authenticateRequest];
};

struct QuoteResponse(HTTPResponse) {
    data: HTTPResponseJSONBodyKey[Array[Quote]]; # Can put more complex types here obv.
    page_key: HTTPResponseJSONBodyKey[str | null];
};

func getBearerToken() : str {
    if (!BEARER_TOKEN_EXPIRES || (BEARER_TOKEN_EXPIRES && BEARER_TOKEN_EXPIRES <= time.time())) {
        return AuthRequest().resolve() : response => {
            BEARER_TOKEN = response.access_token;
            BEARER_TOKEN_EXPIRES = response.expires_in;
            return BEARER_TOKEN;
        }
    }
    else {
        return BEARER_TOKEN
    } 
};

func getNextPaginationRequest(request: HTTPRequest, response: HTTPResponse) : HTTPRequest | null { # Defines how to paginate the next request.
    if(response.page_key != null){
        request.page_key = response.page_key;
        return request;
    }
    return null;
}

func authenticateRequest(request: HTTPRequest) : HTTPRequest {
    return getBearerToken() : token => {
        request.headers["Authentication"] = "Bearer " + token;
        return request
    }
};

func getQuoteHistory(quoteId: str, days: int) : [Quote] {
    return gather(QuoteRequest(endpoint="quotes/{quoteId}/history", filter=f"timestamp>={days*60*60*24+time.time()}").paginate(limit=1000) : quoteResponses => 
        iterate(quoteResponses) : quoteResponse => 
            iterate(quoteResponse.data) : quote => {
                return quote;
            };
    );
};

func getQuotes(minPrice: int) : stream[Quote] {
    return gather(QuoteRequest(endpoint="quotes", filter=f"price>={minPrice}").paginate(limit=1000) : quoteResponses => 
        iterate(quoteResponses) : quoteResponse => 
            iterate(quoteResponse.data) : quote => {
                return quote;
            };
    );
};

# I like this logic.
func main() {
    return getQuotes(minPrice=400) : quotes => # Get all quotes beneath 400.
        gather( # Marks this a synchronous point - move on when everything within it resolves completely.
            iterate(quotes) : quote => # For each.
                getQuoteHistory(quote=quote, days=5) : quoteHistory => { # Feed quotes into getQuoteHistory asynchronously.
                    return historicalQuote, sum([historicalQuote.volume for historicalQuote in quoteHistory])/len(quoteHistory); # If quoteHistory is yielded, we'd need to gather here.
                }
        ) : historicalQuoteTuples => { # Array of tuples. [[{id:NVDA,price:145.12,volume:2219892,timestamp:1750125915408},2679892]]
            write("output.json", JSON, {historicalQuoteTuple[0].id: historicalQuoteTuple[1] for historicalQuoteTuple in historicalQuoteTuples}); # I personally love python dict/list comphrension. It's intuitive and powerful.
        }
};